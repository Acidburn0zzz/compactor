; CDDL specification of the DNS-Stats C-DNS format.
; https://datatracker.ietf.org/doc/draft-ietf-dnsop-dns-capture-format/
;
; This copy contains modifications from c-dns.cddl, the version in the draft.
;
; For more information on CDDL, see
; https://tools.ietf.org/html/draft-ietf-cbor-cddl-01
;

File = [
    file-type-id  : tstr .regexp "C-DNS",
    file-preamble : FilePreamble,
    file-blocks   : [* Block],
]

FilePreamble = {
    major-format-version => uint .eq 0,
    minor-format-version => uint .eq 5,
    ? private-version    => uint .eq 1000,    ; Compactor private ID.
    ? configuration      => Configuration,
    ? generator-id       => tstr,
    ? host-id            => tstr,
}

major-format-version = 0
minor-format-version = 1
private-version      = 2
configuration        = 3
generator-id         = 4
host-id              = 5

Configuration = {
    ? query-timeout      => uint,
    ? skew-timeout       => uint,
    ? snaplen            => uint,
    ? promisc            => uint,
    ? interfaces         => [* tstr],
    ? server-addresses   => [* IPAddress],  ; Hint for downstream analysis
    ? vlan-ids           => [* uint],
    ? filter             => tstr,
    ? query-options      => QRCollectionSections,
    ? response-options   => QRCollectionSections,
    ? accept-rr-types    => [* uint],
    ? ignore-rr-types    => [* uint],
    ? max-block-qr-items => uint,
    ? collect-malformed  => uint,
}

QRCollectionSectionValues = &(
    question  : 0,       ; Second & subsequent question sections
    answer    : 1,
    authority : 2,
    additional: 3,
)
QRCollectionSections = uint .bits QRCollectionSectionValues

query-timeout      = 0
skew-timeout       = 1
snaplen            = 2
promisc            = 3
interfaces         = 4
vlan-ids           = 5
filter             = 6
query-options      = 7
response-options   = 8
accept-rr-types    = 9
ignore-rr-types    = 10
server-addresses   = 11
max-block-qr-items = 12
collect-malformed  = 13

Block = {
    preamble                => BlockPreamble,
    ? statistics            => BlockStatistics, ; Much of this could be derived
    tables                  => BlockTables,
    queries                 => [* QueryResponse],
    ? address-event-counts  => [* AddressEventCount],
    ? malformed-packet-data => [* MalformedPacket],
}

preamble              = 0
statistics            = 1
tables                = 2
queries               = 3
address-event-counts  = 4
malformed-packet-data = 5

BlockPreamble = {
    earliest-time => Timeval
}

earliest-time = 1

Timeval = [
    seconds       : uint,
    microseconds  : uint,
    ? picoseconds : uint,
]

BlockStatistics = {
    ? total-packets                => uint,
    ? total-pairs                  => uint,
    ? unmatched-queries            => uint,
    ? unmatched-responses          => uint,
    ? completely-malformed-packets => uint,
    ? partially-malformed-packets  => uint,

    ? compactor-non-dns-packets      => uint,
    ? compactor-out-of-order-packets => uint,
    ? compactor-missing-pairs        => uint,
    ? compactor-missing-packets      => uint,
    ? compactor-missing-non-dns      => uint,
}

total-packets                = 0
total-pairs                  = 1
unmatched-queries            = 2
unmatched-responses          = 3
completely-malformed-packets = 4
partially-malformed-packets  = 5

compactor-non-dns-packets        = 10
compactor-out-of-order-packets   = 11
compactor-missing-pairs          = 12
compactor-missing-packets        = 13
compactor-missing-non-dns        = 14

QuestionTables = (
    qlist => [* QuestionList],
    qrr   => [* Question]
)

RRTables = (
    rrlist => [* RRList],
    rr     => [* RR]
)

BlockTables = {
    ip-address => [* IPAddress],
    classtype  => [* ClassType],
    name-rdata => [* bstr],            ; Holds both Name RDATA and RDATA
    query-sig  => [* QuerySignature],
    ? QuestionTables,
    ? RRTables
 }

ip-address = 0
classtype  = 1
name-rdata = 2
query-sig  = 3
qlist      = 4
qrr        = 5
rrlist     = 6
rr         = 7

QueryResponse = {
    time-useconds         => uint,       ; Time offset from start of block
    ? time-pseconds       => uint,       ; in microseconds and picoseconds
    client-address-index  => uint,
    client-port           => uint,
    transaction-id        => uint,
    query-signature-index => uint,
    ? client-hoplimit     => uint,
    ? delay-useconds      => int,
    ? delay-pseconds      => int,        ; Must have same sign as delay-useconds
    ? query-name-index    => uint,
    ? query-size          => uint,       ; DNS size of query
    ? response-size       => uint,       ; DNS size of response
    ? query-extended      => QueryResponseExtended,
    ? response-extended   => QueryResponseExtended,
}

time-useconds         = 0
time-pseconds         = 1
client-address-index  = 2
client-port           = 3
transaction-id        = 4
query-signature-index = 5
client-hoplimit       = 6
delay-useconds        = 7
delay-pseconds        = 8
query-name-index      = 9
query-size            = 10
response-size         = 11
query-extended        = 12
response-extended     = 13

ClassType = {
    type  => uint,
    class => uint,
}

type  = 0
class = 1

DNSFlagValues = &(
    query-cd   : 0,
    query-ad   : 1,
    query-z    : 2,
    query-ra   : 3,
    query-rd   : 4,
    query-tc   : 5,
    query-aa   : 6,
    query-do   : 7,
    response-cd: 8,
    response-ad: 9,
    response-z : 10,
    response-ra: 11,
    response-rd: 12,
    response-tc: 13,
    response-aa: 14,
)
DNSFlags = uint .bits DNSFlagValues

QueryResponseFlagValues = &(
    has-query               : 0,
    has-reponse             : 1,
    query-has-question      : 2,
    query-has-opt           : 3,
    response-has-opt        : 4,
    response-has-no-question: 5,
)
QueryResponseFlags = uint .bits QueryResponseFlagValues

TransportFlagValues = &(
    tcp               : 0,
    ipv6              : 1,
    query-trailingdata: 2,
)
TransportFlags = uint .bits TransportFlagValues

QuerySignature = {
    server-address-index    => uint,
    server-port             => uint,
    transport-flags         => TransportFlags,
    qr-sig-flags            => QueryResponseFlags,
    ? query-opcode          => uint,
    qr-dns-flags            => DNSFlags,
    ? query-rcode           => uint,
    ? query-classtype-index => uint,
    ? query-qd-count        => uint,
    ? query-an-count        => uint,
    ? query-ar-count        => uint,
    ? query-ns-count        => uint,
    ? edns-version          => uint,
    ? udp-buf-size          => uint,
    ? opt-rdata-index       => uint,
    ? response-rcode        => uint,
}

server-address-index  = 0
server-port           = 1
transport-flags       = 2
qr-sig-flags          = 3
query-opcode          = 4
qr-dns-flags          = 5
query-rcode           = 6
query-classtype-index = 7
query-qd-count        = 8
query-an-count        = 9
query-ar-count        = 10
query-ns-count        = 11
edns-version          = 12
udp-buf-size          = 13
opt-rdata-index       = 14
response-rcode        = 15

QuestionList = [
    * uint,                           ; Index of Question
]

Question = {                          ; Second and subsequent questions
    name-index      => uint,          ; Index to a name in the name-rdata table
    classtype-index => uint,
}

name-index      = 0
classtype-index = 1

RRList = [
    * uint,                           ; Index of RR
]

RR = {
    name-index      => uint,          ; Index to a name in the name-rdata table
    classtype-index => uint,
    ttl             => uint,
    rdata-index     => uint,          ; Index to RDATA in the name-rdata table
}

ttl         = 2
rdata-index = 3

QueryResponseExtended = {
    ? question-index   => uint,       ; Index of QuestionList
    ? answer-index     => uint,       ; Index of RRList
    ? authority-index  => uint,
    ? additional-index => uint,
}

question-index   = 0
answer-index     = 1
authority-index  = 2
additional-index = 3

AddressEventCount = {
    ae-type          => &AddressEventType,
    ? ae-code        => uint,
    ae-address-index => uint,
    ae-count         => uint,
}

ae-type          = 0
ae-code          = 1
ae-address-index = 2
ae-count         = 3

AddressEventType = (
    tcp-reset              : 0,
    icmp-time-exceeded     : 1,
    icmp-dest-unreachable  : 2,
    icmpv6-time-exceeded   : 3,
    icmpv6-dest-unreachable: 4,
    icmpv6-packet-too-big  : 5,
)

MalformedPacket = {
    time-useconds   => uint,           ; Time offset from start of block
    ? time-pseconds => uint,           ; in microseconds and picoseconds
    malformed-type  => &MalformedPacketType,
    packet-content  => bstr,           ; Raw packet contents
}

malformed-type   = 2
packet-content   = 3

MalformedPacketType = (
    completely-malformed: 0,
    partially-malformed : 1,
)

IPv4Address = bstr .size 4
IPv6Address = bstr .size 16
IPAddress = IPv4Address / IPv6Address
